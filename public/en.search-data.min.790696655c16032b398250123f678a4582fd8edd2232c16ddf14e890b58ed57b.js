'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/about/','title':"About",'content':"This is a \u0026ldquo;hello world\u0026rdquo; example website for the blogdown package. The theme was forked from @jrutheiser/hugo-lithium-theme and modified by Yihui Xie.\n"});index.add({'id':1,'href':'/2015/07/23/hello-r-markdown/','title':"Hello R Markdown",'content':" R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   "});index.add({'id':2,'href':'/post/','title':"Posts",'content':""});index.add({'id':3,'href':'/covid.tidyverse/','title':"Introduction to the Tidyverse",'content':" \nWe’re going to be using data from the COVID Tracking Project in the US. To my knowledge, nothing similar exists for European or world data, or we would have looked at local data. The API is easily accessible, and a woman already created a wrapper package for R to make accessing historical and current statistics incredibly simple. That’s what we’ll use today.\n \nFirst, let’s load the packages we’ll use for this analysis. Calling library(tidyverse) will load all the functions we’ll need today, except we must also import magrittr, which provides us with the pipe (%\u0026gt;%) operator for chaining syntax.\nlibrary(tidyverse) # data science toolkit ## ── Attaching packages ───────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.0 ✓ purrr 0.3.4 ## ✓ tibble 3.0.0 ✓ dplyr 0.8.5 ## ✓ tidyr 1.0.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0 ## Warning: package \u0026#39;tibble\u0026#39; was built under R version 3.6.2 ## Warning: package \u0026#39;purrr\u0026#39; was built under R version 3.6.2 ## ── Conflicts ──────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(magrittr) # corresponding operators ## ## Attaching package: \u0026#39;magrittr\u0026#39; ## The following object is masked from \u0026#39;package:purrr\u0026#39;: ## ## set_names ## The following object is masked from \u0026#39;package:tidyr\u0026#39;: ## ## extract library(covid19us) # scrapes https://covidtracking.com/ API ## Warning: package \u0026#39;covid19us\u0026#39; was built under R version 3.6.2 library(ggsci) # custom color palettes library(ggpubr) # publication-ready plots library(knitr) # create docs of text + code \nThen, let’s load the complete longitudinal dataset and select the variables that will be relevant for our analysis. Additionally, we’re going to pull a csv file from https://worldpopulationreview.com/ that contains state-abbreviation pairs (e.g. CA, California) that we’ll use later to ‘beautify’ our plots. Lastly, from that same website I have downloaded the (projected) 2020 census estimates, which we’ll read in and use to standardize our data to e.g. tests per 100,000 residents.\nstates.data \u0026lt;- get_states_daily() %\u0026gt;% select(c(\u0026#39;state\u0026#39;,\u0026#39;date\u0026#39;,\u0026#39;positive\u0026#39;,\u0026#39;negative\u0026#39;,\u0026#39;death\u0026#39;,\u0026#39;total_test_results\u0026#39;)) states.data %\u0026gt;% dplyr::slice(1:10) %\u0026gt;% knitr::kable(results = \u0026#39;html\u0026#39;)   state date positive negative death total_test_results    AK 2020-04-26 341 15836 9 16177  AL 2020-04-26 6270 67281 216 73551  AR 2020-04-26 2941 36528 49 39469  AS 2020-04-26 0 3 0 3  AZ 2020-04-26 6526 58285 275 64811  CA 2020-04-26 42164 483920 1710 526084  CO 2020-04-26 12968 46823 672 59791  CT 2020-04-26 25269 54542 1924 79811  DC 2020-04-26 3841 14227 178 18068  DE 2020-04-26 4034 15215 120 19249    states.abbrev \u0026lt;- read_csv(\u0026#39;https://worldpopulationreview.com/static/states/abbr-name-list.csv\u0026#39;) ## Parsed with column specification: ## cols( ## name = col_character(), ## abbreviation = col_character() ## ) states.population \u0026lt;- \u0026#39;~/Desktop/teaching_tidyverse/us.state.population.csv\u0026#39; %\u0026gt;% read_csv() %\u0026gt;% select(c(\u0026#39;rank\u0026#39;,\u0026#39;State\u0026#39;,\u0026#39;Pop\u0026#39;)) ## Parsed with column specification: ## cols( ## rank = col_double(), ## State = col_character(), ## Pop = col_double(), ## Growth = col_double(), ## Pop2018 = col_double(), ## Pop2010 = col_double(), ## growthSince2010 = col_double(), ## Percent = col_double(), ## density = col_double() ## ) "});})();